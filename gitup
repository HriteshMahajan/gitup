#!/bin/bash

# AUTHOR : Hritesh Mahajan

# Define constants
version=v1.0.0
TASK_DIR="${HOME}/Desktop/tasks"  # Change this to your preferred directory
SCRIPT_NAME=$(basename "$0")
CODEBASE="${HOME}/Desktop"

# Display usage help
usage() {
  cat <<EOF
Usage: $SCRIPT_NAME [OPTIONS]

CLI tool to automate git operations and task tracking.

Options:
  -t, --task        Task name (required)
  -d, --description Task description (used if creating a new task file)
  -r, --repo        Repository name (required)
  -b, --branch      Branch name (required)
  -s, --source      Source branch to create a new branch from (if branch does not exist)
  -m, --message     Commit message (required)
  -p, --pr          PR link to update in the task file (required after pushing)
  -cp, --cherry-pick Source branch to cherry-pick commits from (for copying commits)
  -v, --version     Display version
  -h, --help        Display this help message and exit

Examples:
  $SCRIPT_NAME --task "T1234" --repo "my-repo" --branch "feature-branch" --message "Fixing bugs" --pr "https://github.com/my-repo/pr/123"
  $SCRIPT_NAME --task "Gitup" --repo "gitup" --branch "temp" --cherry-pick "main"
EOF
  exit 1
}

# Display version
display_version() {
  echo "gitup $version"
  exit 1
}

# Function to check if a branch exists
check_branch_exists() {
  local branch="$1"
  git rev-parse --verify "$branch" >/dev/null 2>&1
}

# Function to prompt user for input if argument is missing
prompt_input() {
  local prompt_message="$1"
  read -p "$prompt_message: " input
  echo "$input"
}

# Function to check if a required argument is missing, and prompt if necessary
check_required_arg() {
  local arg_val="$1"
  local prompt_message="$2"
  if [[ -z "$arg_val" ]]; then
    arg_val=$(prompt_input "$prompt_message")
  fi
  echo "$arg_val"
}

# Function to check if a required argument is missing, and prompt if necessary
check_required_arg_repo() {
  local arg_val="$1"
  local prompt_message="$2"
  if [[ -z "$arg_val" ]]; then
    display_available_repos
    arg_val=$(prompt_input "$prompt_message")
  fi
  echo "$arg_val"
}

# Function to execute user-defined commands
execute_user_commands() {
  local command
  echo "You can now execute any commands you need. Type [d]one when you are finished."
  while true; do
    read -p "($(pwd)>) " command
    if [[ "$command" == "done" || "$command" == "d" ]]; then
      break
    fi
    eval "$command"
  done
}

# Function to display available repositories in the CODEBASE
display_available_repos() {
  echo "Available repositories in $CODEBASE:"

  local repos=($(ls -d "${CODEBASE}"/*/ 2>/dev/null | xargs -n 1 basename)) 

  if [[ ${#repos[@]} -eq 0 ]]; then
    echo "No repositories found in $CODEBASE."
    exit 1
  fi

  local max_length=0
  for repo in "${repos[@]}"; do
    local len=${#repo}
    if (( len > max_length )); then
      max_length=$len
    fi
  done

  local padding=4
  local columns=$(( $(tput cols) / (max_length + padding) ))
  local count=0

  for repo in "${repos[@]}"; do
    printf "%-${max_length}s" "$repo"
    count=$((count + 1))
    if (( count % columns == 0 )); then
      echo
    else
      printf "%s" " "
    fi
  done
  echo
}

# Function to update or create the task file
update_task_file() {
  local task_name="$1"
  local branch_name="$2"
  local pr_link="$3"
  local commits="$4"
  local repo_name="$5"

  local task_file="${TASK_DIR}/${task_name}.json"

  # Read existing JSON file or create default content if it doesn't exist
  if [[ -f "$task_file" ]]; then
    local file_content=$(cat "$task_file")

    # Check if the file is empty or does not contain the required fields
    if [[ -z "$file_content" || "$file_content" == "{}" ]]; then
      echo "Task file is empty or does not contain the required fields. Creating new task file..."
      local description=$(check_required_arg "$description" "Enter task description")
      file_content=$(jq -n --arg name "$task_name" --arg description "$description" '{name: $name, description: $description, branch: {}}')
      echo "$file_content" > "$task_file"
      echo "Created new task file: $task_file"
    else
      # Check if description is missing
      if ! echo "$file_content" | jq -e '.description != null' >/dev/null; then
        echo "Description is missing in the task file. Updating description..."
        local description=$(check_required_arg "$description" "Enter task description")
        file_content=$(echo "$file_content" | jq --arg description "$description" '.description = $description')
      fi
    fi
  else
    # Create a new file with required details
    local description=$(check_required_arg "$description" "Enter task description")
    file_content=$(jq -n --arg name "$task_name" --arg description "$description" '{name: $name, description: $description, branch: {}}')
    echo "$file_content" > "$task_file"
    echo "Created new task file: $task_file"
  fi

  # Check if branch exists in the task file
  if echo "$file_content" | jq -e --arg branch_name "$branch_name" '.branch[$branch_name] != null' >/dev/null; then
    echo "Branch '$branch_name' already exists. Updating..."

    # Check if the repo already exists under the branch
    if echo "$file_content" | jq -e --arg branch_name "$branch_name" --arg repo_name "$repo_name" '.branch[$branch_name][$repo_name] != null' >/dev/null; then
      echo "Updating repository '$repo_name' under branch '$branch_name'..."
      
      # Update the existing repository section with new PR and commits
      file_content=$(echo "$file_content" | jq --arg branch_name "$branch_name" --arg repo_name "$repo_name" --arg pr_link "$pr_link" --arg commits "$commits" '
        .branch[$branch_name][$repo_name].pr += " \($pr_link)" |
        .branch[$branch_name][$repo_name].commit += " \($commits)"
      ')

    else
      # If the repository doesn't exist under the branch, create it
      echo "Creating new repository section for '$repo_name' under branch '$branch_name'..."
      local new_repo=$(jq -n --arg pr "$pr_link" --arg commits "$commits" '{pr: $pr, commit: $commits}')
      file_content=$(echo "$file_content" | jq --arg branch_name "$branch_name" --arg repo_name "$repo_name" --argjson new_repo "$new_repo" '.branch[$branch_name][$repo_name] = $new_repo')
    fi

  else
    # If the branch doesn't exist, create it with the repository
    echo "Branch '$branch_name' does not exist. Creating it..."
    local new_repo=$(jq -n --arg pr "$pr_link" --arg commits "$commits" '{pr: $pr, commit: $commits}')
    file_content=$(echo "$file_content" | jq --arg branch_name "$branch_name" --arg repo_name "$repo_name" --argjson new_repo "$new_repo" '.branch[$branch_name] = {($repo_name): $new_repo}')
  fi

  # Write the updated content back to the task file
  echo "$file_content" | jq '.' > "$task_file"
  echo "Task file updated: $task_file"
}

# Function to extract commit hashes from the JSON file
extract_commits_from_json() {
  local task_name="$1"
  local source_branch="$2"
  local target_branch="$3"
  local repo_name="$4"

  local task_file="${TASK_DIR}/${task_name}.json"
  
  if [[ ! -f "$task_file" ]]; then
    echo "Task file $task_file does not exist."
    exit 1
  fi
  
  local commits_source=$(jq -r --arg branch "$source_branch" --arg repo "$repo_name" '.branch[$branch][ $repo ].commit' "$task_file")
  local commits_target=$(jq -r --arg branch "$target_branch" --arg repo "$repo_name" '.branch[$branch][ $repo ].commit' "$task_file")

  # Convert the commit strings to arrays
  commits_source_arr=($commits_source)
  commits_target_arr=($commits_target)

  # Filter commits present in source but not in target (in original order)
  commits=()
  for commit in "${commits_source_arr[@]}"; do
      if [[ ! " ${commits_target_arr[@]} " =~ " $commit " ]]; then
          commits+=("$commit")
      fi
  done

  # Join the commits array into a space-separated string
  commits_string=$(printf "%s " "${commits[@]}")

  # Display the result
  # echo "Commits to cherry-pick: $commits_string"

  echo "$commits_string"
}

# Function to update the JSON file with cherry-picked commits
update_json_with_commits() {
  local task_name="$1"
  local target_branch="$2"
  local repo_name="$3"
  local commits="$4"

  local task_file="${TASK_DIR}/${task_name}.json"
  
  local new_entry=$(jq -n --arg pr "    " --arg commits "$commits" '{pr: $pr, commit: $commits}')
  local file_content=$(cat "$task_file")

  # Update or create the target branch entry
  if echo "$file_content" | jq -e --arg branch "$target_branch" '.branch[$branch] != null' >/dev/null; then
    echo "Updating branch '$target_branch'..."
    file_content=$(echo "$file_content" | jq --arg branch "$target_branch" --arg repo "$repo_name" --argjson new_entry "$new_entry" '
      .branch[$branch][$repo] = $new_entry
    ')
  else
    echo "Creating new branch '$target_branch'..."
    file_content=$(echo "$file_content" | jq --arg branch "$target_branch" --arg repo "$repo_name" --argjson new_entry "$new_entry" '
      .branch[$branch] = {($repo): $new_entry}
    ')
  fi

  # Write the updated content back to the task file
  echo "$file_content" | jq '.' > "$task_file"
  echo "Task file updated: $task_file"
}

# Function to execute cherry-pick from source branch
cherry_pick_commits() {
  local source_branch="$1"
  local target_branch="$2"
  local commits="$3"

  
  git checkout "$target_branch" || { echo "Failed to checkout target branch $target_branch"; execute_user_commands; }
  echo "Cherry-picking commits from $source_branch to $target_branch..."
  
  git cherry-pick $commits || { echo "Failed to cherry-pick commits"; execute_user_commands;}
}

# Function to check if there are uncommitted changes
check_uncommitted_changes() {
  if [[ -n $(git status --porcelain) ]]; then
    return 0  # There are uncommitted changes
  else
    return 1  # No uncommitted changes
  fi
}

# Function to handle uncommitted changes
handle_uncommitted_changes() {
  echo "Warning: There are uncommitted changes in the current branch."
  
  while true; do
    read -p "Do you want to (S)tash, (D)iscard, or (E)xecute custom commands? (S/D/E): " choice
    case "$choice" in
      [Ss]* )
        git stash
        echo "Uncommitted changes stashed."
        break
        ;;
      [Dd]* )
        git reset --hard HEAD
        echo "Uncommitted changes discarded."
        break
        ;;
      [Ee]* )
        execute_user_commands
        # After executing user commands, ask again to stash or discard
        echo "Rechecking for uncommitted changes after executing custom commands."
        break;
        ;;
      * )
        echo "Invalid option. Please choose S, D, or E."
        ;;
    esac
  done
}

extract_commits_from_json "Gitup" "main" "test" "gitup"

# Parse arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -t|--task) task_name="$2"; shift ;;
    -d|--description) description="$2"; shift ;;
    -r|--repo) repo_name="$2"; shift ;;
    -b|--branch) branch_name="$2"; shift ;;
    -s|--source) source_branch="$2"; shift ;;
    -m|--message) commit_message="$2"; shift ;;
    -cp|--cherry-pick) cherry_pick_source="$2"; shift ;;
    -v|--version) display_version ;;
    -p|--pr) pr_link="$2"; shift ;;
    -h|--help) usage ;;
    *) echo "Unknown option: $1"; usage ;;
  esac
  shift
done


# Prompt for required arguments if missing
task_name=$(check_required_arg "$task_name" "Enter task name (it should be unique)")

# Set task file location
TASK_FILE="${TASK_DIR}/${task_name}.json"

# Create task file if it doesn't exist
if [ ! -f "$TASK_FILE" ]; then
  description=$(check_required_arg "$description" "Enter task description")
  mkdir -p "$TASK_DIR"
  echo "{
  \"name\": \"$task_name\",
  \"description\": \"$description\",
  \"branch\": {}
}" > "$TASK_FILE"
  echo "Created new task file: $TASK_FILE"
fi

# Change to the specified repository directory
repo_name=$(check_required_arg_repo "$repo_name" "Enter repository name")

REPO_PATH="${HOME}/Desktop/$repo_name"
if [ -d "$REPO_PATH" ]; then
  cd "$REPO_PATH" || { echo "Failed to change directory to $REPO_PATH"; exit 1; }
else
  echo "Repository directory $REPO_PATH does not exist."
  exit 1
fi

current_branch=$(git rev-parse --abbrev-ref HEAD)
# Check if branch exists and create if necessary
if check_branch_exists "$branch_name"; then
  # Only check for uncommitted changes if switching to a different branch
  if [ "$current_branch" != "$branch_name" ]; then
    if check_uncommitted_changes; then
      handle_uncommitted_changes
    fi
  fi

  git checkout "$branch_name"
  git pull origin "$branch_name"
  echo "Switched to branch $branch_name."
else
  # Check if the source branch exists
  source_branch=$(check_required_arg "$source_branch" "Enter source branch to create new branch from")
  if check_branch_exists "$source_branch"; then
    # Check for uncommitted changes before switching to the source branch
    if check_uncommitted_changes; then
      handle_uncommitted_changes
    fi
    git checkout "$source_branch"
    git checkout -b "$branch_name"
    echo "Created and switched to new branch '$branch_name' from '$source_branch'."

    # Copy commits from source branch in JSON
    commits=$(extract_commits_from_json "$task_name" "$source_branch" "$repo_name")
    if [[ -n "$commits" ]]; then
      echo "Copying commits from $source_branch to new branch $branch_name in JSON file."
      update_json_with_commits "$task_name" "$branch_name" "$repo_name" "$commits"
    else
      echo "No commits for $task_name found in source branch $source_branch."
    fi
  else
    echo "Error: Source branch '$source_branch' does not exist."
    exit 1
  fi
fi


# Execute cherry-pick if requested
if [[ -n "$cherry_pick_source" ]]; then
  commits=$(extract_commits_from_json "$task_name" "$cherry_pick_source" "$branch_name" "$repo_name")
  cherry_pick_commits  "$cherry_pick_source" "$branch_name" "$commits"
  echo "Pushing to branch $branch_name."
  git push origin "$branch_name" || { echo "Failed to push changes"; execute_user_commands; }
  # Update task file with PR link and commit hash
  pr_link=$(check_required_arg "$pr_link" "Enter PR link")
  update_task_file "$task_name" "$branch_name" "$pr_link" "$commits" "$repo_name"
  exit 1
fi

# Execute user-defined commands
echo "Please do the necessary changes before moving ahead"
execute_user_commands

# Commit and push changes
commit_message=$(check_required_arg "$commit_message" "Enter commit message")

# Commit and push changes
echo "Committing to branch $branch_name."
git commit -m "$commit_message" || { echo "Failed to commit changes"; execute_user_commands; }
echo "Pushing to branch $branch_name."
git push origin "$branch_name" || { echo "Failed to push changes"; execute_user_commands; }

# Update task file with PR link and commit hash
COMMIT_HASH=$(git log -n 1 --pretty=format:%H)
pr_link=$(check_required_arg "$pr_link" "Enter PR link")
update_task_file "$task_name" "$branch_name" "$pr_link" "$COMMIT_HASH" "$repo_name"